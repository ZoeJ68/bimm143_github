---
title: "Class 8: Breast Cancer Mini Project"
author: "Zoe Matsunaga (PID: A16853288)"
format: pdf
toc: true
---

## Background 

This class mini-project focuses on unsupervised learning analysis of human breast cancer cell data. Principal component analysis (PCA) for dimensionality reduction will be conducted and then hierarchical and k-means clustering techniques will be applied. The project involves exploratory data analysis, interpreting PCA results, evaluating clustering performance by comparing cluster assignments to actual diagnoses, and optionally combining PCA with clustering. The goal is to identify potential groupings within the cell data based on their characteristics without prior knowledge of malignancy, and the project concludes with an application of the PCA model to classify new patient samples.

## Data Import

Our data from the U. of Wisconsin Medical Center 

```{r}
wisc.df <- read.csv("WisconsinCancer.csv", row.names=1)
head(wisc.df)
```

> Q1. How many patients/smaples are in this dataset?

```{r}
nrow(wisc.df)
```

> Q2. How many of the observations have a malignant diagnosis?

```{r}
table(wisc.df$diagnosis)
```
```{r}
sum(wisc.df$diagnosis == "M")
```

> Q3. How many variables/features are in the data are suffixed with _mean?

```{r}
grep("_mean", colnames(wisc.df), value=T)
```

```{r}
length(grep("_mean", colnames(wisc.df), value=T))
```

There is a diagnosis column that is the clinician consensus that I want to exclude from further analysis. We will come back later and compare our results to this diagnosis. 

```{r}
diagnosis <- as.factor(wisc.df$diagnosis)
head(diagnosis)
```
Now we can remove it from the `wisc.df`

```{r}
wisc.data <- wisc.df[,-1]
```

## Clustering

Let's try `hclust()`

```{r}
hc <- hclust(dist(wisc.data))
plot(hc)
```

We can extract clusters from this rather poor dendrogram/tree with the `cutree()`

```{r}
grps <- cutree(hc, k=2)
```

How many individuals in each cluster? 

```{r}
table(grps)
```

```{r}
table(diagnosis)
```

We can generate a cross-table that compares our cluster `grps` vector without `diagnosis` vector values

```{r}
table(diagnosis, grps)
```

## Principal Component Analysis

### Importance of Data Scaling

The main function for PCA in "base" R is `prcomp()`. It has a default input parameter of `scale=FALSE`. 

```{r}
head(mtcars)
```

We could do a PCA of this data as is and it could be misleading...

```{r}
pc <- prcomp(mtcars)
biplot(pc)
```

Let's look at the mean values of each column and their standard deviation. 

```{r}
colMeans(mtcars)
```
```{r}
apply(mtcars, 2, sd)
```

We can "scale" this data before PCA to get a much better representation and analysis of all the columns.

```{r}
mtscale <- scale(mtcars)
```

```{r}
round(colMeans(mtscale))
```

```{r}
apply(mtscale, 2, sd)
```

```{r}
pc.scale <- prcomp(mtscale)
```

We can look at the two main results figures from PCA - the "PC plot" (a.k.a score plot, ordienation plot, or PC1 vs PC2 plot, etc). The "loadings plot" how the original variables contribute to the new PCs. 

A loading plot of the unscalled PCA results:

```{r}
library(ggplot2)

ggplot(pc$rotation) +
  aes(PC1, rownames(pc$rotation)) + 
  geom_col()
```

Loading plot of the scalled data.

```{r}
ggplot(pc.scale$rotation) +
  aes(PC1, rownames(pc.scale$rotation)) + 
  geom_col()
```

PC plot of scaled PCA results: 

```{r}
library(ggrepel)
ggplot(pc.scale$x) +
  aes(PC1, PC2, label=rownames(pc.scale$x)) +
  geom_point() +
  geom_text_repel()
```

> **Key Point**: In general we will set `scale=TRUE` when we do PCA. This is not the defualt but probably should be...

We can check the SD and mean of the different columns in `wisc.data` to see if we need to scale - hint we do!

### PCA wisc.data

```{r}
wisc.pr <- prcomp(wisc.data, scale=TRUE)
```

To see how well PCA is doing here in terms of capturing the variance/spread in the data we can use the `summary()` function.

```{r}
summary(wisc.pr)
```

Let's make the main PC1 vs PC2 

```{r}
ggplot(wisc.pr$x) +
  aes(PC1, PC2, col=diagnosis)+
  geom_point()+
  xlab("PC1 (44.3%)")+
  ylab("PC2 (19%)")
```

PC1 vs PC3

```{r}
ggplot(wisc.pr$x)+
  aes(PC1, PC3, col = diagnosis)+
  geom_point()+
  xlab("PC1 (44.3%)")
  ylab = ("PC3 (9.3%)")
```

> Q. Calculate the variance

```{r}
pr.var <- (wisc.pr$sdev^2)
head(pr.var)
```

```{r}
pve <- (pr.var) / (sum(pr.var) )
plot(pve, xlab = "Principal Component", 
     ylab = "Proportion of Variance Explained", 
     ylim = c(0, 1), type = "o")
```

Let's make it a bar plot

```{r}
barplot(pve, ylab = "Precent of Variance Explained",
     names.arg=paste0("PC",1:length(pve)), las=2, axes = FALSE)
axis(2, at=pve, labels=round(pve,2)*100 )
```

Let's make it more visually pleasing using ggplot!

```{r}
library(factoextra)
fviz_eig(wisc.pr, addlabels = TRUE)
```

> Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean?

```{r}
wisc.pr$rotation["concave.points_mean", 1]
```

> Q10.  What is the minimum number of principal components required to explain 80% of the variance of the data?

Looking at the `summary(wisc.pr)`, the minimum number of principal components required to explain 80% of the variance of data is 5, because PC5 has 84.7% of cumulative proportion. 

## Combining Methods

We can take our PCA results and use them as a basis set for other analysis such as clustering. 

### Clustering on PCA Results

```{r}
wisc.pr.hclust <- hclust( dist(wisc.pr$x[, 1:2]), method = "ward.D2")
plot(wisc.pr.hclust)
```


We can "cut" this tree to yield our clusters (groups): 

```{r}
pc.grps <- cutree(wisc.pr.hclust, k=2)
table(pc.grps)
```

How do my cluster grps compare to the expert diagnosis

```{r}
table(diagnosis, pc.grps)
```

```{r}
table(diagnosis)
```

> Q15. How well does the newly created model with four clusters separate out the two diagnoses?

There is a better separation of the B and M diagnoses, giving us a better match of the expert vs PCA data. 

> Q16. How well do the k-means and hierarchical clustering models you created in previous sections (i.e. before PCA) do in terms of separating the diagnoses? Again, use the table() function to compare the output of each model (wisc.km$cluster and wisc.hclust.clusters) with the vector containing the actual diagnoses.

They did very bad. We did much better after PCA, with the new PCA variables giving us a much better separation of M and B.

## Prediction

We can use our PCA model for the analysis of new "unseen" data. In this case from U. Mich. 

```{r}
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```

Let's plot this!

```{r}
plot(wisc.pr$x[,1:2], col=diagnosis)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```


> Q18. Which of these new patients should we prioritize for follow up based on your results?

Based on the results, Patient 1 should be prioritized for follow-up because it has a high positive PC1 score, meaning it is more likely a malignant diagnosis. 

